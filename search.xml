<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《86-不存在的戰區》——少年与少女，战场中的“无人机”之血</title>
      <link href="2020/12/26/86-bu-cun-zai-de-zhan-qu-shao-nian-yu-shao-nu-zhan-chang-zhong-de-wu-ren-ji-zhi-xie/"/>
      <url>2020/12/26/86-bu-cun-zai-de-zhan-qu-shao-nian-yu-shao-nu-zhan-chang-zhong-de-wu-ren-ji-zhi-xie/</url>
      
        <content type="html"><![CDATA[<p>————————————</p><p>阅前提示： </p><p>1.会涉及到剧透，请自行考虑是否阅读。</p><p>2.本篇为个人向杂谈，仅代表个人观点以及感想。</p><p>3.个人很不专业，没有任何写作经验，如出现词汇错误或其他问题欢迎指正。</p><p>4.标题中书名使用繁体，单纯只是因为我喜欢这个译名，以及认为繁体字更有史诗感（或是其 他什么感觉233，总之感觉很不错就对了）。</p><p>5.看到86动画21年4月就要播出了，我也就随便写写纪念一下。</p><p>————————————</p><p><img src="https://note.youdao.com/yws/api/personal/file/150888AF42164A16B5CA78F68DABAB8A?method=download&shareKey=3cdc2be42cb1fbd4f316fe777a43c051" alt="第一卷主视图"></p><p>  <strong>这世上没有任何国家，会因为国内饲养的猪只未获人权而受到谴责。</strong>　　</p><p>  <strong>因此，若是将语言不同、肤色不同、祖先不同的族群定义为徒具人形的猪猡，那么，对于这样的族群进行打压、迫害或屠杀，也不算是违反人权的暴行。</strong>　　</p><p>  **从有人认为这种想法是正确的，大多数人都不反对的那一刻起，圣玛格诺利亚共和国的灭亡就开始了，同时也在那一刻结束。　　　　　　　　　　　　　　<br>**</p><p>​                                                                                                                                                              <strong>——芙拉蒂蕾娜·米利杰《回顾录》</strong></p><p>这是我个人很喜欢的一段话，出自小说第一卷。</p><p>这段话也将圣玛格诺利亚共和国的结局钉死在石板之上。</p><p>本作大胆选择了人种歧视与战争为题材，这也是我第一次在轻小说中看到二战的影子，安里太太，即作者本人也在第一卷后记中说明了本作取材自二次大战某轴心国、某同盟国的黑历史（想必诸位也可以看出来）（作者本人无恶意），说实话第一卷并不是能让我“轻松阅读的小说”。</p><p>曾经以民主平等闻名世界的圣玛格诺利亚共和国，现在在其光鲜亮丽的身后却是惨无人道的人种迫害。</p><p>在共和国东部战场上，作为“处理单元”的86们，与「军团」浴血奋战，身旁的伙伴一个个死去，而在他们身后第一区中却是一片祥和安宁，蔚蓝天空之下，白系种所过的生活完全不是常年处于战争之中的国家所能拥有的，这一切都是那么的讽刺。</p><p>——————————</p><p>『——接下来，为各位播报本日战况。』<br>　　『入侵第一七战区的帝国无人机「军团」机甲部队，在我圣玛格诺利亚共和国引以为傲的自律式无人战斗机械「破坏神」的迎击下，遭受毁灭性打击而撤退。我方损害极小，同时，本日也没有人员伤亡——』</p><p>夕阳染红了这片无人战场，放眼望去，战场上尽是怒放的虞美人，那艳丽的鲜红色在燃尽苍穹的夕阳映照下，是美得如此癫狂。</p><p>今天又是无人伤亡的一天。</p><p>——————————</p><p>第一卷我最喜欢的一卷，颇有传奇色彩与史诗感，对我来说，第一卷是完全可以作为一个完整的故事，结局少年与少女再会，对我来说已经十分完美了。当然后续虽说没有第一卷这样传奇，但也很好看。</p><p><strong>“願那該死的光榮終歸於先鋒戰隊”【Fucking glory to Spearhead squadron】</strong></p><p>——————————</p><p>后记</p><p>引用原文均为台版，个别引用段落，个人修改修改了一部分</p><p>觉得好看就快去看！</p><p>边听边写</p><p>BGM:Call of Silence x YouSeeBIGGIRL(Splice Version)</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=496507504&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 轻小说 </category>
          
          <category> 阅读感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《86-不存在的戰區》 </tag>
            
            <tag> 轻小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人用c笔记</title>
      <link href="2020/10/24/c-bi-ji-ge-ren-yong/"/>
      <url>2020/10/24/c-bi-ji-ge-ren-yong/</url>
      
        <content type="html"><![CDATA[<p>2-7不可改变的常量</p><p>在程序执行过程中，<strong>值不发生改变的量称为常量</strong>。C语言的常量可以分为<strong>直接常量和符号常量</strong></p><pre><code>常量-直接常量-间接常量</code></pre><h3 id="直接常量"><a href="#直接常量" class="headerlink" title="直接常量"></a>直接常量</h3><p>也称为字面量，是可以直接拿来使用无需说明的量</p><p>exp:</p><ul><li>整型常量：13、0、-13</li><li>实型常量：13.33、-24.4</li><li>字符常量：‘a’、’M‘</li><li>字符串常量：“I love game”</li></ul><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//整型常量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span><span class="token number">2.33</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实型常量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//字符常量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I love game"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串常量</span></code></pre><p><strong>在C语言中，可以用一个标识符来表示一个常量，称之为符号常量。符号常量在使用之前必需先定义，其一般形式为：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> 标识符 常量值</span></code></pre><p>2-9 强制类型转换</p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">double</span> num<span class="token operator">=</span><span class="token number">2.33</span><span class="token punctuation">;</span><span class="token keyword">int</span> numx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>num<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>numx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在使用强制转换时应注意以下问题：</p><p>1、<strong>数据类型和表达式都必须加括号</strong>，如把(int)(x/2+y)写成(int)x/2+y则成了把x转换成int型之后再除2再与y相加了。</p><p>2、转换后不会改变原数据的类型及变量值，只在本次运算中<strong>临时性转换</strong>。</p><p>3、强制转换后的运算结果<strong>不遵循四舍五入原则</strong>。</p></blockquote><p>3-2 算数运算符</p><ul><li><p>加、减、乘、除:+ - * /</p></li><li><p><strong>求余运算符（模运算符）:  %     exp:23%7=2</strong></p></li><li><p><strong>自增运算符[?]: ++     exp: int a = 1;a++</strong></p></li><li><p><strong>自减运算符[?]: –       exp:int  a = 1;a++</strong></p></li></ul><hr><p>除法运算中注意：</p><p>如果相除的<strong>两个数都是整数</strong>的话，则<strong>结果也为整数</strong>，小数部分省略，如8/3 = 2；而两数中<strong>有一个为小数</strong>，<strong>结果则为小数</strong>，如：9.0/2 = 4.500000。</p><p>取余运算中注意：</p><p>该运算<strong>只适合用两个整数</strong>进行取余运算，如：10%3 = 1；而10.0%3则是错误的；运算后的符号取决于被模数的符号，如(-10)%3 = -1;而10%(-3) = 1。</p><p>注：C语言中没有乘方这个运算符，也不能用×，÷等算术符号。</p><p><img src="http://img.mukewang.com/548043a400012aa904320091.jpg"></p><p>3-4 练习题</p><p>3-5 赋值运算符</p><pre class=" language-c"><code class="language-c">exp<span class="token punctuation">:</span><span class="token operator">+</span><span class="token operator">=</span>、<span class="token operator">-</span><span class="token operator">=</span>、<span class="token operator">*</span><span class="token operator">=</span>、<span class="token operator">/</span><span class="token operator">=</span>、<span class="token operator">%</span><span class="token operator">=</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用简单赋值语句实现x乘以2。</span>    x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用复合赋值语句实现y乘以2。</span>    y<span class="token operator">*</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y=%d\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>3-6 关系运算符</p><p><img src="http://img.mukewang.com/5481551100017fbe04250141.jpg"></p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x是否大于y:%d\n"</span><span class="token punctuation">,</span>    x<span class="token operator">></span>y         <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//x是否大于y</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y是否大于等于x:%d\n"</span><span class="token punctuation">,</span> y<span class="token operator">>=</span>x        <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//y是否大于等于x</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y是否小于z:%d\n"</span><span class="token punctuation">,</span> y<span class="token operator">&lt;</span>z            <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//y是否小于z</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z是否小于等于x:%d\n"</span><span class="token punctuation">,</span>z<span class="token operator">&lt;=</span>x          <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//z是否小于等于x</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z是否等于x+y:%d\n"</span><span class="token punctuation">,</span>     z<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//z是否等于x+y</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>3-7 逻辑运算符</p><p><img src="http://img.mukewang.com/54816483000195a203180087.jpg"></p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">175</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//身高为175cm</span>    <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token number">1500000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//银行存款为150万</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"是否符合条件：%d\n"</span><span class="token punctuation">,</span> height<span class="token operator">>=</span><span class="token number">180</span> <span class="token operator">&amp;&amp;</span> money<span class="token operator">>=</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//填写算式</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol><li>与运算(&amp;&amp;)</li></ol><p>参与运算的<strong>两个变量都为真</strong>时，<strong>结果才为真</strong>，否则为假。例如：5&gt;=5 &amp;&amp; 7&gt;5 ，运算结果为真；</p><ol start="2"><li>或运算(||)</li></ol><p>参与运算的两个变量<strong>只要有一个为真</strong>，<strong>结果就为真</strong>。 两个量都为假时，结果为假。例如：5&gt;=5||5&gt;8，运算结果为真；</p><ol start="3"><li>非运算(!)</li></ol><p>参与运算的变量<strong>为真时</strong>，结果<strong>为假</strong>；参与运算量<strong>为假时</strong>，结果<strong>为真</strong>。例如：!(5&gt;8)，运算结果为真。</p><hr><p>3-8 练习题</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    b<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选项A:%d"</span><span class="token punctuation">,</span>b<span class="token operator">++</span><span class="token operator">></span>a<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">-</span>a<span class="token operator">&lt;=</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选项B:%d"</span><span class="token punctuation">,</span>b<span class="token operator">++</span><span class="token operator">>=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token operator">||</span> b<span class="token operator">-</span>a<span class="token operator">&lt;=</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选项C:%d"</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选项D:%d"</span><span class="token punctuation">,</span><span class="token operator">++</span>b<span class="token operator">-</span>a<span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong><em>注意英汉输入区别，上面逗号又TM弄错了</em></strong></p><p>3-9 三目运算符</p><p>C语言中的三目运算符：“?:”，其格式为：</p><p> <strong>表达式1 ? 表达式2 : 表达式3;</strong> </p><p>执行过程是：</p><p>先判断表达式1的值是否为真，如果是真的话执行表达式2；如果是假的话执行表达式3。</p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义小编兜里的钱</span>    <span class="token keyword">double</span> money <span class="token operator">=</span>  <span class="token number">12</span>    <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义打车回家的费用</span>    <span class="token keyword">double</span> cost <span class="token operator">=</span>  <span class="token number">11.5</span>     <span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小编能不能打车回家呢："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出y小编就打车回家了，输出n小编就不能打车回家</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%c"</span><span class="token punctuation">,</span>money<span class="token operator">></span>cost<span class="token operator">?</span><span class="token string">'y'</span><span class="token punctuation">:</span><span class="token string">'n'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>3-10 运算符优先级</p><p><img src="http://img.mukewang.com/54817fa90001654403370200.jpg" alt="优先级顺序表"></p><p>优先级别为1的优先级最高，优先级别为10的优先级别最低。</p><hr><p>4-1 分支结构-简单if语句</p><p>[<img src="http://img.mukewang.com/548659da0001366201430091.jpg" alt="img"></p><p><strong>如果表达式的值为真，则执行其后的语句，否则不执行该语句</strong>。</p><p><img src="http://img.mukewang.com/549cf202000188f802600278.jpg"></p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入你的身高:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">>=</span> <span class="token number">175</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"恭喜你可以参加篮球队\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;</span> <span class="token number">175</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"给爷爪巴\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-2 分支结构之简单if-else语句              </p><p><img src="http://img.mukewang.com/54866bf70001756a01630159.jpg" alt="img"></p><p><strong>如果表达式的值为真，则执行代码块1，否则执行代码块2</strong>。</p><p><img src="http://img.mukewang.com/549cf0ad000157f603260281.jpg" alt="img"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2014</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//今年是2014年</span>    <span class="token comment" spellcheck="true">//补全一下代码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year<span class="token operator">%</span><span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token string">"今年是闰年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token string">"今年是平年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-3 分支结构-多重if-else语句</p><p><img src="http://img.mukewang.com/548694d600018cdf01920272.jpg" alt="img"></p><p><strong>依次判断表达式的值，当出现某个值为真时，则执行对应代码块，否则执行代码块n</strong>。</p><p><img src="http://img.mukewang.com/549cf81d0001d6e205180223.jpg" alt="img"></p><p>exp(乱搞):</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">7200</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//完善一下代码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">10000</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"钻石玩家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"白金玩家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"青铜玩家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"普通玩家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-4 分支结构-嵌套if-else语句</p><p><img src="http://img.mukewang.com/5486bce0000158c801820300.jpg" alt="img"></p><p><img src="http://img.mukewang.com/549d53f80001f45504430218.jpg" alt="img"></p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sale<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//销售业绩为120万</span>    <span class="token keyword">int</span> year<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//刚刚进入公司1年</span>    <span class="token comment" spellcheck="true">//完善代码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sale <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"恭喜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"很遗憾，期望你再接再厉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"很遗憾希望你再接再厉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-6 循环结构-while循环</p><p><img src="http://img.mukewang.com/548806bd000110e701630094.jpg" alt="img"></p><p>表达式表示<strong>循环条件</strong>，执行代码块为<strong>循环体</strong></p><p><img src="http://img.mukewang.com/549c07040001234e02690240.jpg" alt="img"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span>    <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//循环条件应该是什么呢？</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token punctuation">;</span>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>   <span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//这里是不是应该改变循环变量的值</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"100以内所有整数之和为：%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-7 循环结构-do-whlie循环</p><p><img src="http://img.mukewang.com/548819f20001d4a503140091.jpg" alt="img"></p><p>它先执行循环中的执行代码块，然后再判断while中表达式是否为真，如果为真则继续循环；如果为假，则终止循环。因此，<strong>do-while循环至少要执行一次循环语句</strong>。</p><p><img src="http://img.mukewang.com/54af7bac0001998702050189.jpg" alt="img"></p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token operator">=</span><span class="token number">2014</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      year<span class="token operator">++</span><span class="token punctuation">;</span>           number<span class="token operator">=</span>number<span class="token operator">*</span><span class="token number">1.2</span> <span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//这里是不是应该写点什么？</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里好像缺点什么</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"到%d年招工规模突破1000人\n"</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>exp2:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token operator">=</span><span class="token number">2014</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      year<span class="token operator">++</span><span class="token punctuation">;</span>           number<span class="token operator">=</span><span class="token punctuation">(</span>number<span class="token operator">*</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token operator">+</span>number <span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//这里是不是应该写点什么？</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里好像缺点什么</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"到%d年招工规模突破1000人\n"</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-8 循环结构-for循环&lt;1&gt;</p><p><img src="http://img.mukewang.com/54890cf000013b1303130095.jpg" alt="img"></p><p><img src="http://img.mukewang.com/549c0bce0001a0e404290203.jpg" alt="img"></p><p>exp：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义变量sum, num</span>    <span class="token keyword">int</span> sum<span class="token punctuation">,</span> num<span class="token punctuation">;</span>      sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  num <span class="token operator">&lt;=</span><span class="token number">10</span>  <span class="token punctuation">;</span>   num<span class="token operator">++</span>   <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//for循环条件与num的变化值</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         sum<span class="token operator">=</span>sum<span class="token operator">+</span>num  <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算每次数字之间的和sum</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"10以内数的和为：%d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-9 循环结构-for循环&lt;2&gt;</p><p>在for循环中，<strong>表达式1</strong>是一个或多个<strong>赋值语句</strong>，它用来<strong>控制变量的初始值</strong>；<strong>表达式2</strong>是一个<strong>关系表达式</strong>，它决定什么时候退出循环；<strong>表达式3</strong>是循环变量的<strong>步进值</strong>，定义控制循环变量每循环一次后按什么方式变化。这<strong>三部分之间用分号(;)分开</strong></p><p>4-10 循环结构-三种结构的比较</p><p>while、do-while和for三种循环在具体的使用场合上是有区别的，如下：</p><p>1、在<strong>知道循环次数</strong>的情况下更适合<strong>使用for循环</strong>；</p><p>2、在<strong>不知道循环次数</strong>的情况下适合<strong>使用while或者do-while循环</strong>，如果有可能<strong>一次都不循环</strong>应考虑使用<strong>while循环</strong>，如果<strong>至少循环一次</strong>应考虑使用<strong>do-while循环</strong>。</p><p>但是从本质上讲，<strong>while,do-while和for循环之间是可以相互转换的</strong>，如：小明被老师罚抄10次computer这个单词，分别用三种语法写：</p><p><a href="http://img.mukewang.com/54895a8f0001bc9e06840112.jpg"><img src="http://img.mukewang.com/54895a8f0001bc9e06840112.jpg" alt="img"></a></p><p>三种循环结构输出的结果是完全一样的。</p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 小伙伴们：           选择你们认为最合理的循环结构完成功能吧 */</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义计算结果变量sum</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义循环数字变量i</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义符号状态变量flag</span>    <span class="token comment" spellcheck="true">//使用for循环</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token operator">*</span>flag<span class="token punctuation">;</span>        flag<span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-11  练习题</p><p><em>4-12 循环结构-多重循环</em></p><p>在功能需求上，往往一个循环满足不了，比如：循环用一个“*”输出，得到一下图形</p><p><a href="http://img.mukewang.com/5489701e0001aea100560082.jpg"><img src="http://img.mukewang.com/5489701e0001aea100560082.jpg" alt="img"></a></p><p>上面这个例子显然我们用一个循环不是太容易实现，这个时候我们就要用到多重循环，<strong>多重循环就是在循环结构的循环体中又出现循环结构</strong>。</p><p>在实际开发中<strong>一般最多用到三层重循环</strong>。因为循环层数越多，运行时间越长，程序越复杂，所以<strong>一般用2-3层多重循环</strong>就可以了。另外不同循环之间也是可以嵌套的。</p><p>多重循环在执行的过程中，外层循环为父循环，内层循环为子循环，<strong>父循环一次，子循环需要全部执行完，直到跳出循环</strong>。父循环再进入下一次，子循环继续执行…</p><p><a href="http://img.mukewang.com/54898b5d00017ca606480381.jpg"><img src="http://img.mukewang.com/54898b5d00017ca606480381.jpg" alt="img"></a></p><p><strong>注：一个父循环可以有多个子循环</strong></p><p>那么上面这个用“*”输出的矩形用多重循环实现如下：</p><p><img src="http://img.mukewang.com/54897d680001109e02810242.jpg"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 观察每行的空格数量，补全循环条件 */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span>i  <span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span>  <span class="token punctuation">;</span> j<span class="token operator">++</span>   <span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出空格</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 观察每行*号的数量，补全循环条件 */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> k<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token number">-1</span>  <span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//每行输出的*号</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//每次循环换行</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>(没看懂)</p><p>4-13 使用for循环打印9x9乘法表</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义相乘数字i,j以及结果result</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * 使用for循环解决本题相对简单哦~     * 小编偷偷的将源码放在任务“不会了怎么办”中了哦~     * 小编希望童鞋们独立完成哦~     */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d "</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">*</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-14 结束语句-break语句</p><p>实现如下：</p><p><a href="http://img.mukewang.com/5493eaa000019a2d04260300.jpg"><img src="http://img.mukewang.com/5493eaa000019a2d04260300.jpg" alt="img"></a></p><p>运行结果：</p><p><a href="http://img.mukewang.com/5493eb060001f19901830125.jpg"><img src="http://img.mukewang.com/5493eb060001f19901830125.jpg" alt="img"></a></p><p>使用break语句时注意以下几点：</p><p>1、在没有循环结构的情况下，break<strong>不能用在单独的if-else语句中</strong>。</p><p>2、在多层循环中，一个<strong>break语句只跳出当前循环</strong>。</p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> m<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>  m<span class="token operator">%</span>n <span class="token operator">==</span> <span class="token number">0</span>  <span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//什么条件下跳出当前循环</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里应该退出当前循环了</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//n循环结束后，如果m=n的话就输出m</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4-15 结束语句- continue语句</p><p><img src="http://img.mukewang.com/548a5e9900017f4903520280.jpg" alt="img"></p><p><a href="http://img.mukewang.com/548a5efd000154da01670191.jpg"><img src="http://img.mukewang.com/548a5efd000154da01670191.jpg" alt="img"></a></p><p>exp:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//能被3整除这个条件如何写呢？</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//应该用哪个循环结束语句呢？</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                          sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是我梦想活成的样子</title>
      <link href="2020/10/24/zhe-shi-wo-meng-xiang-huo-cheng-de-yang-zi/"/>
      <url>2020/10/24/zhe-shi-wo-meng-xiang-huo-cheng-de-yang-zi/</url>
      
        <content type="html"><![CDATA[<hr><iframe src="//player.bilibili.com/player.html?aid=91299923&bvid=BV1F7411u71s&cid=155884314&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"height=600 width=800> </iframe><p><a href="https://space.bilibili.com/20259914">【软件分享 | 硬核】真●全栈工程师的桌面是什么样的？—稚晖君</a>](<a href="https://www.bilibili.com/video/BV1F7411u71s">https://www.bilibili.com/video/BV1F7411u71s</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 梦想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梦想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人Hexo博客-进阶篇</title>
      <link href="2020/10/21/da-jian-ge-ren-hexo-bo-ke-jin-jie-pian/"/>
      <url>2020/10/21/da-jian-ge-ren-hexo-bo-ke-jin-jie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开学了，大学生活也开始了，进阶篇也着手开始写了。</p><p>（似乎也没什么好说的了，直接开始正题吧）</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-博客的主题设置"><a href="#1-博客的主题设置" class="headerlink" title="1.博客的主题设置"></a>1.博客的主题设置</h3><p>博客主题的选用均以个人喜好决定</p><p><strong>这里主题设置所用主题以我自己博客的主题为例</strong>，我的个人博客所用主题为<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>,这个主题是开源并且免费的,你可以点击上边的链接或者我的博客页面最下方来前往它的Github项目地址</p><h4 id="1-gt-下载博客主题"><a href="#1-gt-下载博客主题" class="headerlink" title="1&gt;下载博客主题"></a>1&gt;下载博客主题</h4><p>我们这里采用Git clone命令直接将项目克隆到本地</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git /themes/hexo-theme-matery</code></pre><p> 一步到位</p><p>之后在hexo根目录下的_config.yml下修改主题</p><img src="https://note.youdao.com/yws/api/personal/file/2D66D76C82484FE090C0C2DBA5457E9F?method=download&shareKey=ebac08abce5819c9b3a2cd9eb2cc2a76" alt="实例" style="zoom:80%;" /><p>修改主题为hexo-theme-matery(注意：记得加空格)，默认主题是landscape，若想修改为其他主题，方式也是类似的</p><h4 id="2-gt-（咕咕）"><a href="#2-gt-（咕咕）" class="headerlink" title="2&gt;（咕咕）"></a>2&gt;（咕咕）</h4>]]></content>
      
      
      <categories>
          
          <category> 个人经验 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人Hexo博客-基础篇</title>
      <link href="2020/09/27/da-jian-ge-ren-hexo-bo-ke-ji-chu-pian/"/>
      <url>2020/09/27/da-jian-ge-ren-hexo-bo-ke-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="在正式写我搭建博客的过程之前的闲聊"><a href="#在正式写我搭建博客的过程之前的闲聊" class="headerlink" title="在正式写我搭建博客的过程之前的闲聊"></a>在正式写我搭建博客的过程之前的闲聊</h2><h3 id="1-关于我为何要搭建这个博客"><a href="#1-关于我为何要搭建这个博客" class="headerlink" title="1.关于我为何要搭建这个博客"></a>1.关于我为何要搭建这个博客</h3><p>搭建个人博客这件事我已经考虑很久了（怎么说也是混着这个圈子玩的，怎么能没有自己的博客呢233），高二的时候有过想法，但一直到高中结束也没能实现。现在高中毕业正值假期，就搭个博客。<del>反正就是闲的无聊</del></p><p>除了上面的原因，还有一个比较现实的理由，就是<strong>找工作</strong>，虽然说我现在所学的专业和我原本所期望的计算机专业不同，但未来我也很有可能去<del>抢学IT同学的饭碗</del>（笑），多一个博客可以让你在竞争时加分<del>容易抢饭碗</del>，咳咳，就这样。至于为何我会知道这个。<a href="https://www.bilibili.com/video/BV1Px411d74c">为什么程序员必须写技术博客?以及如何写?博客在面试时的加分可不是一点点-B站UP主CodeSheep</a>你可以看看这个，我个人觉得挺好。</p><h3 id="2-搭建一个博客难么？"><a href="#2-搭建一个博客难么？" class="headerlink" title="2.搭建一个博客难么？"></a>2.搭建一个博客难么？</h3><p>搭建一个个人博客并不困难<del>（除了对我这样的初学者，美化博客BUG一大堆，各种乱起八糟的balabalabala</del>)~~</p><p>搭建好部署到远端，可以给其他人访问是基础的操作，之后还可以给博客换主题，这就是后话了，我会逐步分享的</p><h3 id="3-你这博客有人看么？"><a href="#3-你这博客有人看么？" class="headerlink" title="3.你这博客有人看么？"></a>3.你这博客有人看么？</h3><p>这我不知道，反正闲着无聊，就当写日记了，总有人会来看吧</p><h3 id="4-搭建过程中感觉怎么样"><a href="#4-搭建过程中感觉怎么样" class="headerlink" title="4.搭建过程中感觉怎么样"></a>4.搭建过程中感觉怎么样</h3><p><strong><em>痛 并 快 乐</em></strong></p><hr><p><strong>接下来就是正题了，我会慢慢一期一期更新的</strong></p><h1 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h1><p><u><strong><em>（这篇教程通篇都是基于Windows系统下进行的，也会涉及到Linxu的部分命令）</em></strong></u></p><blockquote><p>本人搭建Hexo博客参考视频资料<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=4861196362211471908">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo–B站UP主codesheep</a>这个教程做的很好，你们可以参考我的过程以及他的过程结合来看</p></blockquote><h2 id="1-搭建博客所需材料"><a href="#1-搭建博客所需材料" class="headerlink" title="1.搭建博客所需材料"></a>1.搭建博客所需材料</h2><p>你，电脑，不怕麻烦的脑子</p><h2 id="2-准备环境"><a href="#2-准备环境" class="headerlink" title="2. 准备环境"></a>2. 准备环境</h2><ul><li><p>Node.js:<a href="https://nodejs.org/zh-cn/">node.js官网</a></p></li><li><p>Git:<a href="https://git-scm.com/">Git官网</a></p></li></ul><p>Node.js选择LTS版（长期支持版）就可以了</p><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 <a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a> 运行环境。</p></blockquote><blockquote><p>Git(读音为/gɪt/。bai)是一个开源的分布du式版本控制系统，可以有效zhi、高速地处理从很小到到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><p>你可以把这东西当作一个命令行使唤，可以在Git Bush下运行Linux的命令，但除了这个作用，就是为hexo环境（应该是，在我安装Hexo时要求我必须装Git）</p><p>Hexo是基于node.js环境的静态博客，所以必须装node.js</p><p>在Node.js安装好后，会同时安装npm，npm是随同Node.js一起安装的包管理工具，能解决Node.js代码部署上的很多问题</p><p>（其实就是个软件安装器）</p><p>你可以通过以下指令来查看其是否安装好</p><pre><code>node -v  #查看node版本npm -v   #查看npm版本</code></pre><p>效果是这样的</p><img src="https://note.youdao.com/yws/api/personal/file/E6911725B64A40B987DA8A5DB854B248?method=download&shareKey=ca49c4c54d7b8cb58bea4a9767726aff" alt="实际效果" style="zoom: 67%;" /><p>如果上边的安装不会，就去问度娘吧，网上教程很多</p><p>在正式搭建开始前，你还需要借助npm来安装cnpm，即国内镜像源，因为众所周知的原因<del>（墙太高）</del>，原npm下载速度太过缓慢，所以改用cnpm会更快</p><pre><code>npm install -g cnpm --registry=http://registry.npm.taobao.org    #安装淘宝的cnpm</code></pre><p>同样你可以借助查看软件版本来检查是否安装成功</p><pre><code>cnpm -v #查看cnpm版本</code></pre><h2 id="3-开始搭建"><a href="#3-开始搭建" class="headerlink" title="3.开始搭建"></a>3.开始搭建</h2><p>搭建过程十分简单</p><h3 id="Ⅰ-本地部署"><a href="#Ⅰ-本地部署" class="headerlink" title="Ⅰ.本地部署"></a>Ⅰ.本地部署</h3><h4 id="1-创建一个用来存放博客的文件夹，例如blog，具体放在那里自己看，我放在了D盘"><a href="#1-创建一个用来存放博客的文件夹，例如blog，具体放在那里自己看，我放在了D盘" class="headerlink" title="1.创建一个用来存放博客的文件夹，例如blog，具体放在那里自己看，我放在了D盘"></a>1.创建一个用来存放博客的文件夹，例如blog，具体放在那里自己看，我放在了D盘</h4><img src="https://note.youdao.com/yws/api/personal/file/5874A3A668064F469FA2C1461297E2B2?method=download&shareKey=08f11eca41e6b2cc612ab6e09d456811" alt="创建blog目录" style="zoom:67%;" /><p>当然你也可以在cmd命令行界面下进行创建</p><pre><code>cd /d d:/   #进入D盘mkdir blog    #创建blog目录cd blog     #进入D盘中的blog文件夹</code></pre><h4 id="2-安装hexo框架"><a href="#2-安装hexo框架" class="headerlink" title="2.安装hexo框架"></a>2.安装hexo框架</h4><p>在准备环节我们已经安装了cnpm，所以以下就使用cnpm来安装hexo</p><pre><code>cnpm install -g hexo-cli    #安装hexo框架</code></pre><p>你也可以通过npm来安装</p><pre><code>npm install -g hexo-cli    #通过npm安装hexo框架</code></pre><p>同样，你可以通过检查版来确认是否安装成功</p><pre><code>hexo -v #查看hexo版本</code></pre><img src="https://note.youdao.com/yws/api/personal/file/C87AD713060E421BA92CE8F1C44A608A?method=download&shareKey=52370cf730b938f0cac67c2bddd7d790" alt="查看hexo版本" style="zoom:67%;" /><h4 id="3-初始化博客"><a href="#3-初始化博客" class="headerlink" title="3.初始化博客"></a>3.初始化博客</h4><p>使用cmd或git bush进入d:/blog，进行博客初始化操作</p><pre><code>hexo init #初始化博客</code></pre><p>你也可以直接输入路径</p><pre><code>hexo init &lt;folder&gt;</code></pre><p>初始化完成后会生成一些文件</p><img src="https://note.youdao.com/yws/api/personal/file/437EC37813C84688916249B75923BB9F?method=download&shareKey=95ef7991b5eb6d4005c11c6b23ff9de3" alt="参考" style="zoom:67%;" /><p>我因为之后美化+装插件以及下面自己放了俩脚本，所以现在看到这些只有部分是初始化完成后生成的文件</p><p>以下是Hexo官方给出的初始化完成后，指定文件夹的目录下的文件：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><p>hexo博客根目录下的_config.yml是博客的配置文件，后续可以对它进行修改，来实现一些功能</p><p>我们这里暂且只实现一些简单功能，下一篇我会讲美化装主题</p><p>如果你对其他文件或文件夹有疑惑，你可以通过查阅<a href="https://hexo.bootcss.com/docs/setup.html">Hexo官方文档-建站</a>来了解</p><h4 id="4-简单配置"><a href="#4-简单配置" class="headerlink" title="4.简单配置"></a>4.简单配置</h4><blockquote><p>你可以参考<a href="https://hexo.bootcss.com/docs/configuration.html">Hexo官方文档-配置</a>对你的配置文件进行修改</p></blockquote><p>这里放一部分我自己的，你可以对照我的博客来进行参考</p><pre><code># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Trackersubtitle: Tracker`s blogdescription: 极客，大学生keywords: 极客author: 张百川language: zh-CNtimezone: # URL## If your site is put in a subdirectory, set url as &#39;http://example.com/child&#39; and root as &#39;/child/&#39;url:  https://baichuan2077.toproot: /permalink: :year/:month/:day/:title/</code></pre><h4 id="5-启动"><a href="#5-启动" class="headerlink" title="5.启动"></a>5.启动</h4><p>配置完成后，你就可以在本地查看博客效果了<strong>（注意要在Hexo根目录下）</strong></p><pre><code>hexo generate #生成博客静态文件hexo g #生成博客静态文件,也可以这样简写，执行的效果是相同的</code></pre><pre><code>hexo server #启动服务器，即本地部署hexo s #命令简写</code></pre><img src="https://note.youdao.com/yws/api/personal/file/48B3E434FF7C4EC384208A02EAB44E8B?method=download&shareKey=14b95ae723d3c9ce3be45f4a300cbbdb" alt="输入hexo g" style="zoom:67%;" /><img src="https://note.youdao.com/yws/api/personal/file/E2906237BA72458B80EE676578D758E1?method=download&shareKey=0ecd1e7face04f5fac87c9cb67450e2f" alt="输入hexo s" style="zoom:67%;" /><p>上面的是效果，第一次生成并不会有太多文件，我的图片仅供参考</p><p>上面的<a href="https://localhost:4000/">https://localhost:4000</a> 即为本地访问地址，按Ctrl+C可以停止服务</p><p>下面是参考效果：</p><img src="https://note.youdao.com/yws/api/personal/file/AA16CDEE1D494C7F820EA8CAB9FF11FB?method=download&shareKey=894dac650aa07ec2f6b4bcf09469618c" alt="大致效果" style="zoom:67%;" /><p>（今天写不动了，明天继续 20/10/3)</p><h3 id="Ⅱ-远端部署"><a href="#Ⅱ-远端部署" class="headerlink" title="Ⅱ.远端部署"></a>Ⅱ.远端部署</h3><p>我们这里在coding上部署，虽然我个人最先是在GitHub上部署了，但因为众所周知的原因，国外访问会很慢</p><p>如果你对怎样在GitHub上部署Hexo博客感兴趣，你可以去上面找CodeSheep的视频</p><h4 id="1-建立仓库"><a href="#1-建立仓库" class="headerlink" title="1.建立仓库"></a>1.建立仓库</h4><p>首先你需要有一个coding官方账号，你也可以通过微信直接登录，你可以<a href="https://coding.net/">点击这里前往Coding官网</a></p><p>创建完成登录后会进入工作台界面</p><img src="https://note.youdao.com/yws/api/personal/file/21D11BA0A7E44BDCB05210BB3B93C0EA?method=download&shareKey=4ec967fabcc8db03f974e35c1b9fc5b9" alt="工作台界面" style="zoom:80%;" /><p>点击右侧项目–&gt;创建项目–&gt;DevOps项目</p><img src="https://note.youdao.com/yws/api/personal/file/2C41B5A976BD46A9AFB93DF8D5E01D35?method=download&shareKey=bce04ebe8a7ddac3d1e7deebf9a1e107" alt="DevOps项目" style="zoom:80%;" /><p>项目名称可以自己随便写，我这里以blogs为例，项目标识和项目名称一致就可以了</p><p>创建完成项目后，点击左侧代码仓库–&gt;新建代码仓库</p><img src="https://note.youdao.com/yws/api/personal/file/13955077FB9C4250B31AC4A8DC2C6CAF?method=download&shareKey=ebc58affbfe439c2e84cc1c6ed8859a6" style="zoom:80%;" /><p>完成后确认就创建好了</p><img src="https://note.youdao.com/yws/api/personal/file/A33B0F21890F43879C91529595B168DE?method=download&shareKey=e22038c9bf9f2a257d6d5c47c6d069f9" style="zoom:80%;" /><p>创建好后，不进行初始化也可以，复制好这串仓库地址，一会儿部署时需要用到</p><h4 id="2-安装部署插件并上传博客到Coding"><a href="#2-安装部署插件并上传博客到Coding" class="headerlink" title="2.安装部署插件并上传博客到Coding"></a>2.安装部署插件并上传博客到Coding</h4><p>要把博客部署到Coding前我们还需要装一个插件，你可以通过以下命令来安装：</p><pre><code>cnpm install --save hexo-deployer-git #安装git部署插件（注意要在Hexo根目录下）</code></pre><p>安装完成后，我们需要打开hexo博客根目录下的_config.yml来配置**(该内容在配置文件最下方)**</p><pre><code>#配置_config.yml -----    # Deployment    ## Docs: https://hexo.io/docs/deployment.html    deploy:          type: git         repo: https://e.coding.net/track/blogs/blogs.git #这里填写你的Coding代码仓库地址这里以上边创建的为例          branch: master-----</code></pre><p>下面是我的，由于我对多个仓库都进行了部署，你们可以参考我的来多仓库部署：</p><pre><code># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repo:     coding: https://e.coding.net/track/blog/blog.git    github: https://github.com/baichuan2077/baichuan2077.github.io.git    # gitee: https://gitee.com/baichuan2077/blog  branch: master</code></pre><p>配置完成保存后就可以准备上传博客了</p><pre><code>hexo deploy #部署到远端hexo d #部署到远端，简写</code></pre><p>推荐每次部署时执行以下命令</p><pre><code>hexo clean #清除网页缓存hexo generate #重新生成hexo deploy #部署到远端</code></pre><p>上传过程中需要输入账号和密码（Coding)</p><p>上传完成后刷新仓库你就可以看到文件了</p><h4 id="3-配置Coding静态网页"><a href="#3-配置Coding静态网页" class="headerlink" title="3.配置Coding静态网页"></a>3.配置Coding静态网页</h4><p>（昨天写在半夜，看配置页面改了，今天再写）（新版权限很迷惑，有点搞不来）</p><h5 id="1-gt-旧版"><a href="#1-gt-旧版" class="headerlink" title="1&gt; 旧版"></a>1&gt; 旧版</h5><p><a href="https://help.coding.net/docs/cd/static-website.html">点击这里查看旧版官方文档</a></p><p>这里官方有详细的教程，我就不写了</p><h5 id="2-gt-新版"><a href="#2-gt-新版" class="headerlink" title="2&gt;新版"></a>2&gt;新版</h5><p>新版总是会报错，部署失败，在运行Shell脚本那一步，我查看日志中提到用户权限不足，但实际权限是有的，我用了主账户，如果有大佬看到麻烦在评论中给我讲解一下</p><p><a href="https://help.coding.net/docs/cd/static-website-v2.html?_ga=2.135543153.1397851094.1601778487-1036921730.1600955029">点击这里查看新版官方文档</a></p><h3 id="Ⅲ-常用Hexo命令"><a href="#Ⅲ-常用Hexo命令" class="headerlink" title="Ⅲ.常用Hexo命令"></a>Ⅲ.常用Hexo命令</h3><pre><code>hexo n &quot;标题&quot; = hexo new &quot;标题&quot; #新建文章hexo clean #清理网页缓存hexo g = hexo generate #生成静态文件hexo s = hexo server #启动服务预览hexo d = hexo deploy #部署到远端</code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>基础篇到这里就算结束了，第一次写，文章肯定会有很多不足之处，希望大家多多指正，如果有问题或者指正的地方请在下方评论区留言</p><p>下次写个人美化博客的过程</p><p>​                                                                                                                                                                                                                 —2020/10/7</p><hr><blockquote><p>本篇文章用到的参考资料:</p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=3554719333100371618">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo—codesheep</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></p><p><a href="https://help.coding.net/">Coding官方帮助中心文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人经验 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一下我很喜欢的MAD</title>
      <link href="2020/09/25/fen-xiang-yi-xia-wo-hen-xi-huan-de-mad/"/>
      <url>2020/09/25/fen-xiang-yi-xia-wo-hen-xi-huan-de-mad/</url>
      
        <content type="html"><![CDATA[<h3 id="分享一个我初中很喜欢的MAD，在我迷茫时给予我动力的正能量MAD"><a href="#分享一个我初中很喜欢的MAD，在我迷茫时给予我动力的正能量MAD" class="headerlink" title="分享一个我初中很喜欢的MAD，在我迷茫时给予我动力的正能量MAD"></a>分享一个我初中很喜欢的MAD，在我迷茫时给予我动力的正能量MAD</h3><p><a href="https://www.bilibili.com/video/BV18s411Q75G">【多素材/正能量燃泪混剪】这首歌曾经拯救了我的一切</a></p><p>UP主是Mr小丧   16年发布的</p><iframe src="//player.bilibili.com/player.html?aid=4055623&bvid=BV18s411Q75G&cid=6543593&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height=600    width=800 >  </iframe><p>时隔多年看依旧很感动</p><p>当初用心做MAD的大佬，现在都被无情的资本伤透了心，只能说很无奈吧</p><p>以后有机会，我或许会自己开一个弹幕网站</p><p>Flag先立这里2333</p><p>插入视频用到HTML：</p><pre><code>&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=4055623&amp;bvid=BV18s411Q75G&amp;cid=6543593&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; height=600 width=800 &gt;  &lt;/iframe&gt;</code></pre><p>上边是实例演示</p><blockquote><p>  <a href="http://blog.fandong.me/2017/08/25/Markdown-Advance/">参考资料-Markdown高级用法(嵌套音视频)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ACGN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MAD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客中遇到的问题及其解决方法</title>
      <link href="2020/09/23/da-jian-ge-ren-bo-ke-zhong-yu-dao-de-wen-ti-ji-qi-jie-jue-fang-fa/"/>
      <url>2020/09/23/da-jian-ge-ren-bo-ke-zhong-yu-dao-de-wen-ti-ji-qi-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>现在博客还在初步测试中,之后我会把整个布置过程写出来</p><hr><h1 id="2020-09-23"><a href="#2020-09-23" class="headerlink" title="2020/09/23"></a>2020/09/23</h1><p>中午了，不想睡觉，就来写写博客吧   (顺便试试看用Markdown写博客是给啥感觉)</p><p>我最开始的方案是在nanopi neo 上搭建好再部署到github上，但nanopi neo 在使用过程中出现了很多问题，让我不得不放弃使用（应该是我技术辣鸡233）</p><p>出现的问题</p><ul><li><p><strong>由于是用于嵌入式开发的板子，所以使用的精简后的系统，我装的官方修改过的UbuntuCore</strong></p></li><li><p><strong>精简后的系统缺少了很多东西，让我找了半天，硬是敲指令装完</strong></p></li><li><p><strong>装的过程中发现下载巨慢，完了想起来都是国外的源，之后又改为国内的源</strong></p></li><li><p><strong>你以为这就完了？不，我发现我没有在安装时就弄好全局安装，哦吼，完蛋，继续搞</strong></p></li></ul><p>可能是由于node.js安装时出现问题，直到现在我也没能在那个小东西上部署博客</p><p>于是就改用了现在的方案：<strong>改用个人电脑搭建，就是按照我原本参考的视频教程完全照搬</strong></p><p>我参考的视频教程是B站的UP主CodeSheep发布的<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=7070066021641660546">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p><p>纯小白入门教程，但由于原作者是在MAC电脑上操作的，相对在Windows系统下的部分操作有不同之处，所以需要更改的地方还是有的</p><p>比如装GIT之类的，这些以后再说</p><p><strong>给你们看一下我原本要使用的nanopi:</strong></p><img src="http://a1.qpic.cn/psc?/V52S1Srv2ib0Lq3Soc2R4U5wOH3zM9Pn/ruAMsa53pVQWN7FLK88i5iEcOIP63bQZAyeLcxQcIZBMSVqfc8NDg7LKU0Ex3*A3PDHIOc6UNOcUu4VjujHd2039LztNvjmSmX5hMLeGd90!/c&ek=1&kp=1&pt=0&bo=QAZVCLAKQA4BKeE!&tl=3&vuin=309184637&tm=1600945200&sce=60-2-2&rf=0-0" alt="nanopi neo" style="zoom:50%;" /><p>这是和我手大小的对比，东西很小，4cm x 4 cm</p><p>从闲鱼上捡的2333</p><hr><p>有时间我继续写在windows系统下搭建hexo的经历和遇到的问题</p><ul><li><p><strong>新bug出现了，不过是图床的锅，上边那个图片显示不了(2020/9/23  20:07)</strong></p></li><li><p><strong>用了一个骚操作解决了233（用QQ空间当图床（2020/9/24 19:27)）</strong></p></li><li><p><strong>新的bug出现了，视频无法显示，来看看这回需要多久解决（2020/9/24 19:27)</strong></p></li><li><p><strong>到现在我也不会弄首页视频，文章内插入视频倒是会(20.20.3）</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博文</title>
      <link href="2020/09/22/wo-de-di-yi-pian-bo-wen/"/>
      <url>2020/09/22/wo-de-di-yi-pian-bo-wen/</url>
      
        <content type="html"><![CDATA[<p>于此留念<br>张百川</p><p>高考完真闲啊</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/22/hello-world/"/>
      <url>2020/09/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
